From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jyoti Mahapatra <jyotima@amazon.com>
Date: Tue, 11 Oct 2022 19:09:04 -0700
Subject: [PATCH] --EKS-PRIVATE-- Patch for blocking lease in impacted zone
 during zonal outage

ref: https://quip-amazon.com/0k7FAEo7j60v/Stop-software-operations-in-the-impacted-AZ
---
 .../coordination/validation/validation.go     |  74 +++++++++++
 .../validation/validation_test.go             | 118 ++++++++++++++++++
 2 files changed, 192 insertions(+)

diff --git a/pkg/apis/coordination/validation/validation.go b/pkg/apis/coordination/validation/validation.go
index e3eedcf5a83..013e06fa9cf 100644
--- a/pkg/apis/coordination/validation/validation.go
+++ b/pkg/apis/coordination/validation/validation.go
@@ -17,15 +17,37 @@ limitations under the License.
 package validation
 
 import (
+	"fmt"
+	"os"
+
+	"k8s.io/apimachinery/pkg/api/meta"
 	"k8s.io/apimachinery/pkg/api/validation"
 	"k8s.io/apimachinery/pkg/util/validation/field"
 	"k8s.io/kubernetes/pkg/apis/coordination"
 )
 
+const (
+	// Label applied on the lease object. The value must be availability-zone-id
+	// The label is applied by the az resiliency poller https://gitlab.aws.dev/eks-dataplane/eks-dataplane-az-poller
+	// Refer https://quip-amazon.com/bgPkAo16pbXT/Dataplane-Pollers-for-AZ-Resiliency for details.
+	zoneEvacuationLabelKey = "eks.amazonaws.com/evacuate-zone"
+	// The current availability-zone-id the apiserver is operating in. This is an environment variable set in the
+	// apiserver static pod manifest in https://gitlab.aws.dev/eks-dataplane/eks-kcp-ami-config
+	// EKS assumes that all lease updates from controllers occur within the same host.
+	currentZoneEnvironmentKey = "APISERVER_AVAILABILITY_ZONE"
+)
+
+var eksManagedLeaseNames = map[string]struct{}{
+	"kube-scheduler":           {},
+	"kube-controller-manager":  {},
+	"cloud-controller-manager": {},
+}
+
 // ValidateLease validates a Lease.
 func ValidateLease(lease *coordination.Lease) field.ErrorList {
 	allErrs := validation.ValidateObjectMeta(&lease.ObjectMeta, true, validation.NameIsDNSSubdomain, field.NewPath("metadata"))
 	allErrs = append(allErrs, ValidateLeaseSpec(&lease.Spec, field.NewPath("spec"))...)
+	allErrs = append(allErrs, validateAZ(lease)...)
 	return allErrs
 }
 
@@ -33,6 +55,7 @@ func ValidateLease(lease *coordination.Lease) field.ErrorList {
 func ValidateLeaseUpdate(lease, oldLease *coordination.Lease) field.ErrorList {
 	allErrs := validation.ValidateObjectMetaUpdate(&lease.ObjectMeta, &oldLease.ObjectMeta, field.NewPath("metadata"))
 	allErrs = append(allErrs, ValidateLeaseSpec(&lease.Spec, field.NewPath("spec"))...)
+	allErrs = append(allErrs, validateAZ(lease)...)
 	return allErrs
 }
 
@@ -50,3 +73,54 @@ func ValidateLeaseSpec(spec *coordination.LeaseSpec, fldPath *field.Path) field.
 	}
 	return allErrs
 }
+
+/*
+ * validateAZ function blocks lease update during a zonal outage.
+ * https://quip-amazon.com/0k7FAEo7j60v/Stop-software-operations-in-the-impacted-AZ
+ */
+func validateAZ(lease *coordination.Lease) field.ErrorList {
+	allErrs := field.ErrorList{}
+	if _, ok := eksManagedLeaseNames[lease.GetName()]; !ok {
+		return allErrs
+	}
+
+	if lease.GetNamespace() != "kube-system" {
+		return allErrs
+	}
+
+	metadata, err := meta.Accessor(&lease.ObjectMeta)
+	if err != nil {
+		allErrs = append(allErrs, &field.Error{
+			Type:     field.ErrorTypeInvalid,
+			Field:    "objectMeta",
+			BadValue: lease.ObjectMeta,
+			Detail:   "object does not implement the Object interfaces",
+		})
+		return allErrs
+	}
+	if metadata.GetLabels() == nil {
+		return allErrs
+	}
+
+	excludedZone, ok := metadata.GetLabels()[zoneEvacuationLabelKey]
+	if !ok {
+		return allErrs
+	}
+
+	currentZone, ok := os.LookupEnv(currentZoneEnvironmentKey)
+	if !ok {
+		return allErrs
+	}
+
+	// If both currentZone and excludedZone are empty, its an unexpected bug. The following check
+	// succeeds only when both strings are non empty and they match.
+	if currentZone != "" && excludedZone != "" && excludedZone == currentZone {
+		allErrs = append(allErrs, &field.Error{
+			Type:     field.ErrorTypeForbidden,
+			Field:    currentZoneEnvironmentKey,
+			BadValue: excludedZone,
+			Detail:   fmt.Sprintf("zone %s is experiencing zonal outage. Cannot renew lease.", excludedZone),
+		})
+	}
+	return allErrs
+}
diff --git a/pkg/apis/coordination/validation/validation_test.go b/pkg/apis/coordination/validation/validation_test.go
index 2d102c6a154..bb25c0762d8 100644
--- a/pkg/apis/coordination/validation/validation_test.go
+++ b/pkg/apis/coordination/validation/validation_test.go
@@ -17,6 +17,7 @@ limitations under the License.
 package validation
 
 import (
+	"os"
 	"testing"
 
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
@@ -102,3 +103,120 @@ func TestValidateLeaseSpecUpdate(t *testing.T) {
 		t.Errorf("unexpected list of errors for valid update: %#v", errs.ToAggregate().Error())
 	}
 }
+
+func TestLeaseValidationForLeaseStealing(t *testing.T) {
+	holder := "holder"
+	leaseDurationSeconds := int32(10)
+	tests := []struct {
+		name               string
+		currentZone        string
+		impactedZone       string
+		componentName      string
+		namespaceName      string
+		errorCountExpected int
+		setEnvironment     bool
+		setLabel           bool
+	}{
+		{
+			name:               "FailureIfExcludedZoneIsCurrentZone",
+			currentZone:        "az1",
+			impactedZone:       "az1",
+			componentName:      "kube-scheduler",
+			namespaceName:      "kube-system",
+			errorCountExpected: 1,
+			setEnvironment:     true,
+			setLabel:           true,
+		},
+		{
+			name:               "SuccessIfExcludedZoneIsNotCurrentZone",
+			currentZone:        "az1",
+			impactedZone:       "az2",
+			componentName:      "kube-scheduler",
+			namespaceName:      "kube-system",
+			errorCountExpected: 0,
+			setEnvironment:     true,
+			setLabel:           true,
+		},
+		{
+			name:               "SuccessIfComponentIsNotEKSManagedComponent",
+			currentZone:        "az1",
+			impactedZone:       "az1",
+			componentName:      "some-scheduler",
+			namespaceName:      "kube-system",
+			errorCountExpected: 0,
+			setEnvironment:     true,
+			setLabel:           true,
+		},
+		{
+			name:               "SuccessIfZoneEnvironmentIsUnset",
+			impactedZone:       "az1",
+			componentName:      "kube-scheduler",
+			namespaceName:      "kube-system",
+			errorCountExpected: 0,
+			setEnvironment:     false,
+			setLabel:           true,
+		},
+		{
+			name:               "SuccessIfZoneEnvironmentIsSetButLabelIsNotSet",
+			currentZone:        "az1",
+			componentName:      "kube-scheduler",
+			namespaceName:      "kube-system",
+			errorCountExpected: 0,
+			setEnvironment:     true,
+			setLabel:           false,
+		},
+		{
+			name:               "FailIfNamespaceIsNotKubeSystem",
+			currentZone:        "az1",
+			impactedZone:       "az1",
+			componentName:      "kube-scheduler",
+			namespaceName:      "some-system",
+			errorCountExpected: 0,
+			setEnvironment:     true,
+			setLabel:           true,
+		},
+		{
+			name:               "SuccessIfBothLabelAndZoneAreUnset",
+			componentName:      "kube-scheduler",
+			namespaceName:      "kube-system",
+			errorCountExpected: 0,
+			setEnvironment:     true,
+			setLabel:           true,
+		},
+	}
+
+	for _, test := range tests {
+		t.Run(test.name, func(t *testing.T) {
+			defer os.Unsetenv(currentZoneEnvironmentKey)
+			if test.setEnvironment {
+				os.Setenv(currentZoneEnvironmentKey, test.currentZone)
+			}
+
+			lease := &coordination.Lease{
+				ObjectMeta: metav1.ObjectMeta{
+					Name:            test.componentName,
+					Namespace:       test.namespaceName,
+					ResourceVersion: "1",
+				},
+				Spec: coordination.LeaseSpec{
+					HolderIdentity:       &holder,
+					LeaseDurationSeconds: &leaseDurationSeconds,
+				},
+			}
+
+			if test.setLabel {
+				lease.SetLabels(map[string]string{zoneEvacuationLabelKey: test.impactedZone})
+			}
+
+			errs := ValidateLease(lease)
+			if len(errs) != test.errorCountExpected {
+				t.Errorf("unexpected list of errors for lease create: %v", errs)
+			}
+
+			errs = ValidateLeaseUpdate(lease, lease)
+			if len(errs) != test.errorCountExpected {
+				t.Errorf("unexpected list of errors for lease update: %v", errs)
+			}
+		})
+	}
+}
