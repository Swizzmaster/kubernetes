From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Josselin Costanzi <costanzj@amazon.com>
Date: Wed, 8 Jun 2022 21:23:05 +0000
Subject: [PATCH] --EKS-PRIVATE-- Add patch that limits http2 canonicalized
 headers cache size

Related: https://code.amazon.com/packages/GoLang/commits/2930a16312c510134f182242be721679e3f083a1#
---
 vendor/golang.org/x/net/http2/server.go | 12 +++++++++++-
 1 file changed, 11 insertions(+), 1 deletion(-)

diff --git a/vendor/golang.org/x/net/http2/server.go b/vendor/golang.org/x/net/http2/server.go
index 2aa859f76f9..3a8d3ecb504 100644
--- a/vendor/golang.org/x/net/http2/server.go
+++ b/vendor/golang.org/x/net/http2/server.go
@@ -720,7 +720,17 @@ func (sc *serverConn) canonicalHeader(v string) string {
 		sc.canonHeader = make(map[string]string)
 	}
 	cv = http.CanonicalHeaderKey(v)
-	sc.canonHeader[v] = cv
+	// maxCachedCanonicalHeaders is an arbitrarily-chosen limit on the number of
+	// entries in the canonHeader cache. This should be larger than the number
+	// of unique, uncommon header keys likely to be sent by the peer, while not
+	// so high as to permit unreasonable memory usage if the peer sends an unbounded
+	// number of unique header keys.
+	const maxCachedCanonicalHeaders = 32
+	const maxCachedCanonicalHeadersKeysSize = 1 << 10
+
+	if len(sc.canonHeader) < maxCachedCanonicalHeaders && len(cv) < maxCachedCanonicalHeadersKeysSize {
+		sc.canonHeader[v] = cv
+	}
 	return cv
 }
 
