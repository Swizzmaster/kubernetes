From bc3be6e9148c79ad41dda4c1aaa4b929c344410c Mon Sep 17 00:00:00 2001
From: Jyoti Mahapatra <jyotima@amazon.com>
Date: Fri, 19 Mar 2021 11:21:55 -0700
Subject: [PATCH] Revert "--EKS-PATCH-- volume plugin requests patch"

This reverts commit 3b0b22e753013d871e5c333dd1e45d37bcbf9849.

Based on https://quip-amazon.com/2eLwA4WYxYca#ScX9AAuUgNr changelog
review of version 1.20,
https://github.com/kubernetes/kubernetes/commit/f2e23afcf13fef805ad5341bd7a5625de5982d6c
enabled --volume-host-cidr-denylist . As a result, we don't need this
patch anymore.
---
 pkg/proxy/util/utils.go | 63 +----------------------------------------
 1 file changed, 1 insertion(+), 62 deletions(-)

diff --git a/pkg/proxy/util/utils.go b/pkg/proxy/util/utils.go
index 2d1fdf7e705..0dee2e36e00 100644
--- a/pkg/proxy/util/utils.go
+++ b/pkg/proxy/util/utils.go
@@ -20,13 +20,9 @@ import (
 	"context"
 	"errors"
 	"fmt"
-	mathrand "math/rand"
 	"net"
-	"os"
 	"net/http"
 	"strconv"
-	"strings"
-	"time"
 
 	v1 "k8s.io/api/core/v1"
 	"k8s.io/apimachinery/pkg/types"
@@ -45,9 +41,7 @@ const (
 	IPv4ZeroCIDR = "0.0.0.0/0"
 
 	// IPv6ZeroCIDR is the CIDR block for the whole IPv6 address space
-	IPv6ZeroCIDR               = "::/0"
-	EnvExtraProxyBlackListCIDR = "EXTRA_PROXY_BLACKLIST_CIDR" // Use the more inclusive EnvExtraProxyDenyListCIDR instead
-	EnvExtraProxyDenyListCIDR = "EXTRA_PROXY_DENYLIST_CIDR"
+	IPv6ZeroCIDR = "::/0"
 )
 
 var (
@@ -141,29 +135,6 @@ func IsAllowedHost(host net.IP, denied []*net.IPNet) error {
 	return nil
 }
 
-func IsProxyableHostnameV2(ctx context.Context, resolv Resolver, denyListNetworks []*net.IPNet, hostname string) error {
-	resp, err := resolv.LookupIPAddr(ctx, hostname)
-	if err != nil {
-		return err
-	}
-
-	if len(resp) == 0 {
-		return ErrNoAddresses
-	}
-
-	for _, host := range resp {
-		if err := isProxyableIP(host.IP); err != nil {
-			return err
-		}
-		for _, network := range denyListNetworks {
-			if network.Contains(host.IP) {
-				return ErrAddressNotAllowed
-			}
-		}
-	}
-	return nil
-}
-
 // GetLocalAddrs returns a list of all network addresses on the local system
 func GetLocalAddrs() ([]net.IP, error) {
 	var localAddrs []net.IP
@@ -200,38 +171,6 @@ func ShouldSkipService(service *v1.Service) bool {
 	return false
 }
 
-func NewSafeDialContext(dialContext func(context.Context, string, string) (net.Conn, error)) func(context.Context, string, string) (net.Conn, error) {
-	var denyListNetworks []*net.IPNet
-	denyListCIDRs := os.Getenv(EnvExtraProxyDenyListCIDR)
-	if denyListCIDRs == "" {
-       denyListCIDRs = os.Getenv(EnvExtraProxyBlackListCIDR) // Use the more inclusive EnvExtraProxyDenyListCIDR instead
-   }
-	if denyListCIDRs != "" {
-		for _, cidr := range strings.Split(denyListCIDRs, ",") {
-			_, ipNet, _ := net.ParseCIDR(cidr)
-			denyListNetworks = append(denyListNetworks, ipNet)
-		}
-	}
-
-	return func(ctx context.Context, network, addr string) (net.Conn, error) {
-		start := time.Now()
-		id := mathrand.Int63() // So you can match begins/ends in the log.
-		klog.Infof("[%x: %v] Dialing...", id, addr)
-		defer func() {
-			klog.Infof("[%x: %v] Dialed in %v.", id, addr, time.Since(start))
-		}()
-
-		host, _, err := net.SplitHostPort(addr)
-		if err != nil {
-			return nil, err
-		}
-		if err := IsProxyableHostnameV2(ctx, &net.Resolver{}, denyListNetworks, host); err != nil {
-			return nil, err
-		}
-		return dialContext(ctx, network, addr)
-	}
-}
-
 // GetNodeAddresses return all matched node IP addresses based on given cidr slice.
 // Some callers, e.g. IPVS proxier, need concrete IPs, not ranges, which is why this exists.
 // NetworkInterfacer is injected for test purpose.
