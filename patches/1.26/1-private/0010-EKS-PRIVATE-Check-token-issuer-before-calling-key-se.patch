From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Matthew Wong <mattwon@amazon.com>
Date: Tue, 15 Feb 2022 11:21:27 -0800
Subject: [PATCH] --EKS-PRIVATE-- Check token issuer before calling key-server
 to avoid pointless calls for aws-iam-authenticator token

---
 pkg/serviceaccount/jwt_external.go      | 38 ++++++++++++
 pkg/serviceaccount/jwt_external_test.go |  4 +-
 pkg/serviceaccount/jwt_test.go          | 80 ++++++++++++++++---------
 3 files changed, 92 insertions(+), 30 deletions(-)

diff --git a/pkg/serviceaccount/jwt_external.go b/pkg/serviceaccount/jwt_external.go
index 29014dfbac1..8ce8140fcb5 100644
--- a/pkg/serviceaccount/jwt_external.go
+++ b/pkg/serviceaccount/jwt_external.go
@@ -18,7 +18,10 @@ package serviceaccount
 
 import (
 	"context"
+	"encoding/base64"
+	"encoding/json"
 	"fmt"
+	"strings"
 
 	"google.golang.org/grpc"
 	jose "gopkg.in/square/go-jose.v2"
@@ -144,11 +147,16 @@ func (s *RemoteOpaqueSigner) SignPayload(payload []byte, alg jose.SignatureAlgor
 type ExternalTokenAuthenticator struct {
 	Client       externalsigner.KeyServiceClient
 	Issuers      []string
+	IssuersMap   map[string]bool
 	Validator    Validator
 	ImplicitAuds authenticator.Audiences
 }
 
 func (a *ExternalTokenAuthenticator) AuthenticateToken(ctx context.Context, tokenData string) (*authenticator.Response, bool, error) {
+	if !a.hasCorrectIssuer(tokenData) {
+		return nil, false, nil
+	}
+
 	keyResp, err := a.Client.ListPublicKeys(ctx, &externalsigner.ListPublicKeysRequest{})
 	if err != nil {
 		return nil, false, err
@@ -178,10 +186,40 @@ func ExternalJWTTokenAuthenticator(socketPath string, issuers []string, implicit
 	if err != nil {
 		return nil, err
 	}
+	issuersMap := make(map[string]bool)
+	for _, issuer := range issuers {
+		issuersMap[issuer] = true
+	}
 	return &ExternalTokenAuthenticator{
 		Client:       externalsigner.NewKeyServiceClient(conn),
 		Issuers:      issuers,
+		IssuersMap:   issuersMap,
 		Validator:    validator,
 		ImplicitAuds: implicitAuds,
 	}, nil
 }
+
+// hasCorrectIssuer returns true if tokenData is a valid JWT in compact
+// serialization format and the "iss" claim matches the iss field of this token
+// authenticator, and otherwise returns false.
+//
+// Note: go-jose currently does not allow access to unverified JWS payloads.
+// See https://github.com/square/go-jose/issues/169
+func (a *ExternalTokenAuthenticator) hasCorrectIssuer(tokenData string) bool {
+	parts := strings.Split(tokenData, ".")
+	if len(parts) != 3 {
+		return false
+	}
+	payload, err := base64.RawURLEncoding.DecodeString(parts[1])
+	if err != nil {
+		return false
+	}
+	claims := struct {
+		// WARNING: this JWT is not verified. Do not trust these claims.
+		Issuer string `json:"iss"`
+	}{}
+	if err := json.Unmarshal(payload, &claims); err != nil {
+		return false
+	}
+	return a.IssuersMap[claims.Issuer]
+}
diff --git a/pkg/serviceaccount/jwt_external_test.go b/pkg/serviceaccount/jwt_external_test.go
index d806e346589..510c36ec553 100644
--- a/pkg/serviceaccount/jwt_external_test.go
+++ b/pkg/serviceaccount/jwt_external_test.go
@@ -62,7 +62,8 @@ func newMockKeyServiceClient(privatekey interface{}) *mockKeyServiceClient {
 }
 
 type mockKeyServiceClient struct {
-	key interface{}
+	key                 interface{}
+	listPublicKeysCalls int
 }
 
 func (c *mockKeyServiceClient) SignPayload(ctx context.Context, in *externalsigner.SignPayloadRequest, opts ...grpc.CallOption) (*externalsigner.SignPayloadResponse, error) {
@@ -81,6 +82,7 @@ func (c *mockKeyServiceClient) SignPayload(ctx context.Context, in *externalsign
 }
 
 func (c *mockKeyServiceClient) ListPublicKeys(ctx context.Context, in *externalsigner.ListPublicKeysRequest, opts ...grpc.CallOption) (*externalsigner.ListPublicKeysResponse, error) {
+	c.listPublicKeysCalls++
 	var alg jose.SignatureAlgorithm
 	var kU []byte
 	var err error
diff --git a/pkg/serviceaccount/jwt_test.go b/pkg/serviceaccount/jwt_test.go
index 17d5370d014..29d9208352b 100644
--- a/pkg/serviceaccount/jwt_test.go
+++ b/pkg/serviceaccount/jwt_test.go
@@ -243,14 +243,15 @@ func TestTokenGenerateAndValidate(t *testing.T) {
 		Keys   []interface{}
 		Token  string
 
-		ExpectedErr           bool
-		ExpectedOK            bool
-		ExpectedUserName      string
-		ExpectedUserUID       string
-		ExpectedGroups        []string
-		Authenticator         authenticator.Token
-		ExternalServiceClient externalsigner.KeyServiceClient
-		Issuer                []string
+		ExpectedErr                 bool
+		ExpectedOK                  bool
+		ExpectedUserName            string
+		ExpectedUserUID             string
+		ExpectedGroups              []string
+		Authenticator               authenticator.Token
+		ExternalServiceClient       externalsigner.KeyServiceClient
+		ExpectedListPublicKeysCalls int
+		Issuer                      []string
 	}{
 		"no keys": {
 			Token:       rsaToken,
@@ -355,28 +356,37 @@ func TestTokenGenerateAndValidate(t *testing.T) {
 			ExpectedOK:  false,
 		},
 		"valid (external rsa)": {
-			Token:                 remoteRsaToken,
-			Client:                fake.NewSimpleClientset(serviceAccount),
-			Keys:                  nil,
-			ExpectedErr:           false,
-			ExpectedOK:            true,
-			ExpectedUserName:      expectedUserName,
-			ExpectedUserUID:       expectedUserUID,
-			ExpectedGroups:        []string{"system:serviceaccounts", "system:serviceaccounts:test"},
-			ExternalServiceClient: newMockKeyServiceClient(getPrivateKey(rsaPrivateKey)),
-			Issuer:                newIssuer,
+			Token:                       remoteRsaToken,
+			Client:                      fake.NewSimpleClientset(serviceAccount),
+			Keys:                        nil,
+			ExpectedErr:                 false,
+			ExpectedOK:                  true,
+			ExpectedUserName:            expectedUserName,
+			ExpectedUserUID:             expectedUserUID,
+			ExpectedGroups:              []string{"system:serviceaccounts", "system:serviceaccounts:test"},
+			ExternalServiceClient:       newMockKeyServiceClient(getPrivateKey(rsaPrivateKey)),
+			ExpectedListPublicKeysCalls: 1,
+			Issuer:                      newIssuer,
 		},
-		"invalid key (external)": {
-			Token:                 remoteRsaToken,
-			Client:                fake.NewSimpleClientset(serviceAccount),
-			Keys:                  nil,
-			ExpectedErr:           true,
-			ExpectedOK:            false,
-			ExpectedUserName:      expectedUserName,
-			ExpectedUserUID:       expectedUserUID,
-			ExpectedGroups:        []string{"system:serviceaccounts", "system:serviceaccounts:test"},
-			ExternalServiceClient: newMockKeyServiceClient(getPrivateKey(ecdsaPrivateKey)),
-			Issuer:                newIssuer,
+		"invalid key (external rsa)": {
+			Token:                       remoteRsaToken,
+			Client:                      nil,
+			Keys:                        nil,
+			ExpectedErr:                 true,
+			ExpectedOK:                  false,
+			ExternalServiceClient:       newMockKeyServiceClient(getPrivateKey(ecdsaPrivateKey)),
+			ExpectedListPublicKeysCalls: 1,
+			Issuer:                      newIssuer,
+		},
+		"valid key, invalid issuer (external rsa)": {
+			Token:                       badIssuerToken,
+			Client:                      nil,
+			Keys:                        []interface{}{getPublicKey(rsaPublicKey)},
+			ExpectedErr:                 false,
+			ExpectedOK:                  false,
+			ExternalServiceClient:       newMockKeyServiceClient(getPrivateKey(rsaPrivateKey)),
+			ExpectedListPublicKeysCalls: 0,
+			Issuer:                      newIssuer,
 		},
 	}
 
@@ -397,9 +407,14 @@ func TestTokenGenerateAndValidate(t *testing.T) {
 			)
 			var authn authenticator.Token
 			if tc.ExternalServiceClient != nil {
+				issuersMap := make(map[string]bool)
+				for _, issuer := range tc.Issuer {
+					issuersMap[issuer] = true
+				}
 				authn = &serviceaccount.ExternalTokenAuthenticator{
 					Client:       tc.ExternalServiceClient,
 					Issuers:      tc.Issuer,
+					IssuersMap:   issuersMap,
 					ImplicitAuds: nil,
 					Validator:    serviceaccount.NewValidator(getter),
 				}
@@ -424,6 +439,13 @@ func TestTokenGenerateAndValidate(t *testing.T) {
 				return
 			}
 
+			if tc.ExternalServiceClient != nil {
+				listPublicKeysCalls := tc.ExternalServiceClient.(*mockKeyServiceClient).listPublicKeysCalls
+				if listPublicKeysCalls != tc.ExpectedListPublicKeysCalls {
+					t.Errorf("%s: Expected listPublicKeysCalls=%v, got %v", k, tc.ExpectedListPublicKeysCalls, listPublicKeysCalls)
+				}
+			}
+
 			if err != nil || !ok {
 				return
 			}
