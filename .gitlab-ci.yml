.script_git_config: &script_git_config
  - git config --global user.email "eks-dataplane-team@amazon.com"
  - git config --global user.name "EKSKubernetesPatches pipeline"
  - mkdir -p ./kubernetes/

.script_apply_patches: &script_apply_patches
  - pushd ./kubernetes/ && git reset --hard && git clean -df && popd
  - ./hack/apply_patches.sh ./patches/$MINOR_VERSION/ ./kubernetes/

.script_prepare_patches: &script_prepare_patches
  - ./hack/prepare_patches.sh ./kubernetes/ ./patches/$MINOR_VERSION/
  - |
    if git diff --exit-code;
    then
      echo "Prepared patches.";
    else
      echo "Please prepare the patches again by running \"./hack/apply_patches.sh ./patches/$MINOR_VERSION/ ./kubernetes/ && ./hack/prepare_patches.sh ./kubernetes/ ./patches/$MINOR_VERSION/\" and commit the changes. This ensures the patches have a consistent format and the next person who runs it won't see an unexpected diff because prepare_patches is idempotent.";
      exit 1;
    fi

default:
  image: bitnami/git
  before_script:
    - *script_git_config
  cache:
    key: $MINOR_VERSION
    paths:
      - kubernetes/

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_PIPELINE_SOURCE == "push"
      when: never
    - when: always

.build_update_patches_base_version:
  stage: build
  script:
    - ./hack/update_patches_base_version.sh ./patches/$MINOR_VERSION/ ./kubernetes/
    - ./hack/create_gitlab_merge_request.sh ./patches/$MINOR_VERSION/ $MINOR_VERSION
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"

.test_apply_patches:
  stage: test
  script:
    - *script_apply_patches
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule"

.test_prepare_patches:
  stage: test
  script:
   - *script_apply_patches
   - *script_prepare_patches
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

.test_unit:
  tags:
    - group:eks-dataplane
  image: public.ecr.aws/ubuntu/ubuntu:latest
  before_script:
    - apt-get update && apt-get install git -q -y
    - *script_git_config
  variables:
    # GitLab CI uses the Kubernetes executor which sets these, but they
    # interfere with tests like TestKubeConfigFile
    KUBERNETES_SERVICE_HOST: ""
    KUBERNETES_SERVICE_PORT: ""
  stage: test
  script:
    - *script_apply_patches
    - ./hack/install_test_dependencies.sh ./kubernetes/
    - export PATH=/usr/local/go/bin:$PATH
    - pushd ./kubernetes/ && make test KUBE_RACE=-race KUBE_TIMEOUT=--timeout=900s && popd
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule"
      changes:
        - patches/$MINOR_VERSION/**/*

.test_verify:
  tags:
    - group:eks-dataplane
  image: public.ecr.aws/ubuntu/ubuntu:latest
  before_script:
    - apt-get update && apt-get install git -q -y
    - *script_git_config
  variables:
    # GitLab CI uses the Kubernetes executor which sets these, but they
    # interfere with tests like TestKubeConfigFile
    KUBERNETES_SERVICE_HOST: ""
    KUBERNETES_SERVICE_PORT: ""
  stage: test
  script:
    - *script_apply_patches
    - ./hack/install_test_dependencies.sh ./kubernetes/
    - export PATH=/usr/local/go/bin:$PATH
    - pushd ./kubernetes/ && hack/verify-typecheck.sh --platform="linux/amd64" && popd
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule"
      changes:
        - patches/$MINOR_VERSION/**/*

.test_integration:
  tags:
    - group:eks-dataplane
  image: public.ecr.aws/ubuntu/ubuntu:latest
  before_script:
    - apt-get update && apt-get install git -q -y
    - *script_git_config
  variables:
    KUBE_INTEGRATION_TEST_MAX_CONCURRENCY: 4
    KUBE_TIMEOUT: "--timeout=3600s"
    LOG_LEVEL: 4
  stage: test
  script:
    - *script_apply_patches
    - ./hack/install_test_dependencies.sh ./kubernetes/
    - export PATH=/usr/local/go/bin:$PATH
    - pushd ./kubernetes/
    - ./hack/install-etcd.sh
    - export PATH="${PWD}/third_party/etcd:${PATH}"
    - sysctl fs.inotify.max_user_watches=1048576
    - sysctl fs.inotify.max_user_instances=8192
    - make test-integration
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule"
      changes:
        - patches/$MINOR_VERSION/**/*

.kubernetes_versions: &kubernetes_matrix
  parallel:
    matrix:
    - MINOR_VERSION: ["1.21", "1.22", "1.23", "1.24", "1.25", "1.26", "1.27", "1.28"]

build_update_patches_base_version:
  extends:
  - .build_update_patches_base_version
  <<: *kubernetes_matrix

test_verify:
  extends:
    - .test_verify
  <<: *kubernetes_matrix

test_unit:
  extends:
  - .test_unit
  <<: *kubernetes_matrix

test_integration:
  extends:
  - .test_integration
  <<: *kubernetes_matrix

test_apply_patches:
  extends:
  - .test_apply_patches
  <<: *kubernetes_matrix

test_prepare_patches:
  extends:
  - .test_prepare_patches
  needs:
  - test_apply_patches
  <<: *kubernetes_matrix
